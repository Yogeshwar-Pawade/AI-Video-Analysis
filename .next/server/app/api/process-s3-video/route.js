/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/process-s3-video/route";
exports.ids = ["app/api/process-s3-video/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive":
/*!************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/main/ sync ***!
  \************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/@supabase/realtime-js/dist/main sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "@aws-sdk/client-s3":
/*!*************************************!*\
  !*** external "@aws-sdk/client-s3" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@aws-sdk/client-s3");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-s3-video%2Froute&page=%2Fapi%2Fprocess-s3-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-s3-video%2Froute.ts&appDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-s3-video%2Froute&page=%2Fapi%2Fprocess-s3-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-s3-video%2Froute.ts&appDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_yogeshwarpawade_Desktop_S3CURA_Task_app_api_process_s3_video_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/process-s3-video/route.ts */ \"(rsc)/./app/api/process-s3-video/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/process-s3-video/route\",\n        pathname: \"/api/process-s3-video\",\n        filename: \"route\",\n        bundlePath: \"app/api/process-s3-video/route\"\n    },\n    resolvedPagePath: \"/Users/yogeshwarpawade/Desktop/S3CURA Task/app/api/process-s3-video/route.ts\",\n    nextConfigOutput,\n    userland: _Users_yogeshwarpawade_Desktop_S3CURA_Task_app_api_process_s3_video_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZwcm9jZXNzLXMzLXZpZGVvJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwcm9jZXNzLXMzLXZpZGVvJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcHJvY2Vzcy1zMy12aWRlbyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnlvZ2VzaHdhcnBhd2FkZSUyRkRlc2t0b3AlMkZTM0NVUkElMjBUYXNrJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnlvZ2VzaHdhcnBhd2FkZSUyRkRlc2t0b3AlMkZTM0NVUkElMjBUYXNrJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUM0QjtBQUN6RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL3lvZ2VzaHdhcnBhd2FkZS9EZXNrdG9wL1MzQ1VSQSBUYXNrL2FwcC9hcGkvcHJvY2Vzcy1zMy12aWRlby9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHJvY2Vzcy1zMy12aWRlby9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3Byb2Nlc3MtczMtdmlkZW9cIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Byb2Nlc3MtczMtdmlkZW8vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMveW9nZXNod2FycGF3YWRlL0Rlc2t0b3AvUzNDVVJBIFRhc2svYXBwL2FwaS9wcm9jZXNzLXMzLXZpZGVvL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-s3-video%2Froute&page=%2Fapi%2Fprocess-s3-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-s3-video%2Froute.ts&appDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/process-s3-video/route.ts":
/*!*******************************************!*\
  !*** ./app/api/process-s3-video/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./lib/supabase.ts\");\n/* harmony import */ var _lib_s3_downloader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/s3-downloader */ \"(rsc)/./lib/s3-downloader.ts\");\n/* harmony import */ var _lib_google_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/google-files */ \"(rsc)/./lib/google-files.ts\");\n\n\n\n\n// Logger utility\nconst logger = {\n    info: (message, data)=>{\n        console.log(`[INFO] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    },\n    error: (message, error)=>{\n        console.error(`[ERROR] ${message}`, {\n            message: error?.message,\n            status: error?.status,\n            stack: error?.stack,\n            cause: error?.cause,\n            details: error?.details,\n            response: error?.response\n        });\n    },\n    debug: (message, data)=>{\n        console.debug(`[DEBUG] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// Process video using S3 → Google Files API → Gemini workflow\nasync function processVideoFromS3(s3Key, fileName) {\n    try {\n        logger.info(`Starting S3 → Google Files → Gemini workflow for: ${fileName} (S3 key: ${s3Key})`);\n        // Step 1: Download video from S3\n        logger.info('Step 1: Downloading from S3...');\n        const downloadResult = await _lib_s3_downloader__WEBPACK_IMPORTED_MODULE_2__.s3Downloader.downloadFile(s3Key);\n        logger.info(`Downloaded ${downloadResult.contentLength} bytes from S3`, {\n            contentType: downloadResult.contentType,\n            size: downloadResult.contentLength\n        });\n        // Step 2: Process with Google Files API + Gemini\n        logger.info('Step 2: Processing with Google Files API + Gemini...');\n        const result = await _lib_google_files__WEBPACK_IMPORTED_MODULE_3__.googleFilesProcessor.processVideo(downloadResult.buffer, fileName, downloadResult.contentType);\n        logger.info('Video processing completed successfully');\n        return result;\n    } catch (error) {\n        logger.error('S3 → Google Files → Gemini workflow failed', error);\n        throw new Error(`Video processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\nasync function POST(req) {\n    try {\n        const { s3Key, fileName } = await req.json();\n        if (!s3Key || !fileName) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing required fields: s3Key, fileName'\n            }, {\n                status: 400\n            });\n        }\n        logger.info(`Processing S3 video: ${s3Key}, fileName: ${fileName}`);\n        const encoder = new TextEncoder();\n        const stream = new TransformStream();\n        const writer = stream.writable.getWriter();\n        let isWriterClosed = false;\n        const writeProgress = async (data)=>{\n            if (!isWriterClosed) {\n                try {\n                    await writer.write(encoder.encode(`data: ${JSON.stringify(data)}\\n\\n`));\n                } catch (error) {\n                    logger.error('Failed to write progress', error);\n                }\n            }\n        };\n        const closeWriter = async ()=>{\n            if (!isWriterClosed) {\n                try {\n                    isWriterClosed = true;\n                    await writer.close();\n                } catch (error) {\n                    logger.error('Failed to close writer', error);\n                }\n            }\n        };\n        // Start processing asynchronously\n        (async ()=>{\n            try {\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Downloading video from S3...',\n                    progress: 10\n                });\n                // Step 1: Download from S3\n                const downloadResult = await _lib_s3_downloader__WEBPACK_IMPORTED_MODULE_2__.s3Downloader.downloadFile(s3Key);\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Uploading to Google Files API...',\n                    progress: 30\n                });\n                // Step 2: Upload to Google Files API\n                const uploadResult = await _lib_google_files__WEBPACK_IMPORTED_MODULE_3__.googleFilesProcessor.uploadToGoogleFiles(downloadResult.buffer, fileName, downloadResult.contentType);\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Waiting for Google Files processing...',\n                    progress: 50\n                });\n                // Step 3: Wait for Google processing\n                await _lib_google_files__WEBPACK_IMPORTED_MODULE_3__.googleFilesProcessor.waitForFileProcessing(uploadResult.name);\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Generating transcript and summary with Gemini...',\n                    progress: 70\n                });\n                // Step 4: Process with Gemini\n                const result = await _lib_google_files__WEBPACK_IMPORTED_MODULE_3__.googleFilesProcessor.processVideoWithGemini(uploadResult.fileUri, fileName, downloadResult.contentType);\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Cleaning up Google Files...',\n                    progress: 85\n                });\n                // Step 5: Cleanup Google Files\n                await _lib_google_files__WEBPACK_IMPORTED_MODULE_3__.googleFilesProcessor.deleteGoogleFile(uploadResult.name);\n                await writeProgress({\n                    type: 'progress',\n                    message: 'Saving to database...',\n                    progress: 90\n                });\n                // Step 6: Save to database\n                const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from('summaries').insert({\n                    video_id: s3Key,\n                    title: fileName,\n                    video_url: `s3://${s3Key}`,\n                    summary: result.summary,\n                    transcript: result.transcript,\n                    language: 'en',\n                    ai_model: 'gemini-2.0-flash-001',\n                    video_duration: result.duration || 0,\n                    created_at: new Date().toISOString()\n                }).select().single();\n                if (error) {\n                    logger.error('Database error:', error);\n                    throw new Error('Failed to save summary to database');\n                }\n                await writeProgress({\n                    type: 'complete',\n                    message: 'Video processing completed successfully!',\n                    progress: 100,\n                    summary: result.summary,\n                    transcript: result.transcript,\n                    summaryId: data.id,\n                    title: fileName,\n                    s3Key\n                });\n            } catch (error) {\n                logger.error('Video processing failed:', error);\n                await writeProgress({\n                    type: 'error',\n                    message: error instanceof Error ? error.message : 'Failed to process video',\n                    progress: 0\n                });\n            } finally{\n                await closeWriter();\n            }\n        })();\n        return new Response(stream.readable, {\n            headers: {\n                'Content-Type': 'text/event-stream',\n                'Cache-Control': 'no-cache',\n                'Connection': 'keep-alive'\n            }\n        });\n    } catch (error) {\n        logger.error('Request processing failed:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : 'Failed to process request'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/process-s3-video/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-files.ts":
/*!*****************************!*\
  !*** ./lib/google-files.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleFilesProcessor: () => (/* binding */ GoogleFilesProcessor),\n/* harmony export */   googleFilesProcessor: () => (/* binding */ googleFilesProcessor)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// Logger utility\nconst logger = {\n    info: (message, data)=>{\n        console.log(`[GOOGLE-FILES] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    },\n    error: (message, error)=>{\n        console.error(`[GOOGLE-FILES] ${message}`, {\n            message: error?.message,\n            status: error?.status,\n            stack: error?.stack\n        });\n    }\n};\nclass GoogleFilesProcessor {\n    constructor(){\n        const apiKey = process.env.GEMINI_API_KEY;\n        if (!apiKey) {\n            throw new Error('Gemini API key is not configured. Please add GEMINI_API_KEY to environment variables.');\n        }\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n    }\n    /**\n   * Upload file to Google Files API using resumable upload\n   */ async uploadToGoogleFiles(fileBuffer, fileName, mimeType) {\n        logger.info(`Uploading file to Google Files API: ${fileName}`);\n        try {\n            // Step 1: Initiate resumable upload\n            const metadata = {\n                file: {\n                    display_name: fileName\n                }\n            };\n            logger.info('Starting resumable upload session', {\n                fileName,\n                fileSize: fileBuffer.length,\n                mimeType\n            });\n            const initResponse = await fetch(`https://generativelanguage.googleapis.com/upload/v1beta/files?key=${process.env.GEMINI_API_KEY}`, {\n                method: 'POST',\n                headers: {\n                    'X-Goog-Upload-Protocol': 'resumable',\n                    'X-Goog-Upload-Command': 'start',\n                    'X-Goog-Upload-Header-Content-Length': fileBuffer.length.toString(),\n                    'X-Goog-Upload-Header-Content-Type': mimeType,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(metadata)\n            });\n            if (!initResponse.ok) {\n                const errorText = await initResponse.text();\n                logger.error('Failed to initiate resumable upload', {\n                    status: initResponse.status,\n                    error: errorText\n                });\n                throw new Error(`Failed to initiate upload: ${initResponse.status} - ${errorText}`);\n            }\n            // Step 2: Get upload URL from response headers\n            const uploadUrl = initResponse.headers.get('x-goog-upload-url');\n            if (!uploadUrl) {\n                throw new Error('No upload URL received from Google Files API');\n            }\n            logger.info('Upload session initiated, uploading file data', {\n                uploadUrl\n            });\n            // Step 3: Upload the actual file data\n            const uploadResponse = await fetch(uploadUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Length': fileBuffer.length.toString(),\n                    'X-Goog-Upload-Offset': '0',\n                    'X-Goog-Upload-Command': 'upload, finalize'\n                },\n                body: fileBuffer\n            });\n            if (!uploadResponse.ok) {\n                const errorText = await uploadResponse.text();\n                logger.error('Failed to upload file data', {\n                    status: uploadResponse.status,\n                    error: errorText\n                });\n                throw new Error(`Failed to upload file data: ${uploadResponse.status} - ${errorText}`);\n            }\n            const result = await uploadResponse.json();\n            logger.info('File uploaded successfully to Google Files API', result);\n            // Check if the response has the expected structure\n            if (!result.file || !result.file.name || !result.file.uri) {\n                logger.error('Unexpected upload response format', result);\n                throw new Error('Google Files API returned unexpected response format');\n            }\n            return {\n                fileUri: result.file.uri,\n                name: result.file.name,\n                mimeType: result.file.mimeType,\n                sizeBytes: result.file.sizeBytes,\n                state: result.file.state\n            };\n        } catch (error) {\n            logger.error('Failed to upload to Google Files API', error);\n            throw new Error(`Failed to upload to Google Files API: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Wait for file processing to complete\n   */ async waitForFileProcessing(fileName, maxWaitTime = 300000) {\n        logger.info(`Waiting for file processing: ${fileName}`);\n        const startTime = Date.now();\n        const pollInterval = 5000; // 5 seconds\n        while(Date.now() - startTime < maxWaitTime){\n            try {\n                // Use the file name (not URI) for status checking\n                const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/${fileName}?key=${process.env.GEMINI_API_KEY}`, {\n                    method: 'GET'\n                });\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    logger.error('Failed to check file status', {\n                        status: response.status,\n                        statusText: response.statusText,\n                        error: errorText\n                    });\n                    throw new Error(`Failed to check file status: ${response.status} - ${errorText}`);\n                }\n                const fileInfo = await response.json();\n                logger.info('File processing status', {\n                    state: fileInfo.state,\n                    name: fileInfo.name,\n                    mimeType: fileInfo.mimeType\n                });\n                if (fileInfo.state === 'ACTIVE') {\n                    logger.info('File processing completed successfully');\n                    return true;\n                } else if (fileInfo.state === 'FAILED') {\n                    throw new Error('File processing failed on Google servers');\n                }\n                logger.info(`File state: ${fileInfo.state}, waiting ${pollInterval / 1000}s before next check...`);\n                // Wait before next poll\n                await new Promise((resolve)=>setTimeout(resolve, pollInterval));\n            } catch (error) {\n                logger.error('Error checking file processing status', error);\n                throw error;\n            }\n        }\n        throw new Error(`File processing timeout after ${maxWaitTime / 1000} seconds`);\n    }\n    /**\n   * Generate transcript and summary using Gemini\n   */ async processVideoWithGemini(fileUri, fileName, mimeType) {\n        logger.info(`Processing video with Gemini: ${fileName}`);\n        try {\n            const model = this.genAI.getGenerativeModel({\n                model: \"gemini-2.0-flash-001\"\n            });\n            // Create prompt for video analysis\n            const prompt = `\nYou are an expert video analyst. Please analyze this video file and provide:\n\n1. **Complete Transcript**: Extract all spoken content from the video\n2. **Comprehensive Summary**: Create a detailed summary of the key points, insights, and conclusions\n\nFor the video \"${fileName}\":\n\nInstructions:\n- Extract ALL spoken words accurately\n- Identify main topics and key points\n- Highlight important insights and conclusions\n- Structure the summary with clear sections\n- Use markdown formatting for readability\n- Focus on actionable information and key takeaways\n\nPlease provide your response in this exact format:\n\n## TRANSCRIPT\n[Complete transcript here]\n\n## SUMMARY\n[Comprehensive summary here]\n`;\n            // Generate content with the uploaded file\n            const result = await model.generateContent([\n                prompt,\n                {\n                    fileData: {\n                        fileUri: fileUri,\n                        mimeType: mimeType\n                    }\n                }\n            ]);\n            const response = await result.response;\n            const text = response.text();\n            // Parse the response to extract transcript and summary\n            const sections = this.parseGeminiResponse(text);\n            logger.info('Video processing completed successfully');\n            return {\n                transcript: sections.transcript,\n                summary: sections.summary\n            };\n        } catch (error) {\n            logger.error('Failed to process video with Gemini', error);\n            throw new Error(`Failed to process video with Gemini: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Parse Gemini response to extract transcript and summary\n   */ parseGeminiResponse(text) {\n        const transcriptMatch = text.match(/## TRANSCRIPT\\s*([\\s\\S]*?)(?=## SUMMARY|$)/i);\n        const summaryMatch = text.match(/## SUMMARY\\s*([\\s\\S]*?)$/i);\n        const transcript = transcriptMatch ? transcriptMatch[1].trim() : text;\n        const summary = summaryMatch ? summaryMatch[1].trim() : text;\n        return {\n            transcript: transcript || 'Transcript extraction failed',\n            summary: summary || text\n        };\n    }\n    /**\n   * Clean up uploaded file from Google Files API\n   */ async deleteGoogleFile(fileName) {\n        logger.info(`Deleting file from Google Files API: ${fileName}`);\n        try {\n            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/${fileName}?key=${process.env.GEMINI_API_KEY}`, {\n                method: 'DELETE'\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                logger.error('Failed to delete file from Google Files API', {\n                    status: response.status,\n                    error: errorText\n                });\n            } else {\n                logger.info('File deleted successfully from Google Files API');\n            }\n        } catch (error) {\n            logger.error('Error deleting file from Google Files API', error);\n        // Don't throw error for cleanup operations\n        }\n    }\n    /**\n   * Complete workflow: upload, process, and cleanup\n   */ async processVideo(fileBuffer, fileName, mimeType) {\n        let uploadedFile = null;\n        try {\n            // Step 1: Upload to Google Files API\n            uploadedFile = await this.uploadToGoogleFiles(fileBuffer, fileName, mimeType);\n            // Step 2: Wait for processing (use file name, not URI)\n            await this.waitForFileProcessing(uploadedFile.name);\n            // Step 3: Process with Gemini (use file URI)\n            const result = await this.processVideoWithGemini(uploadedFile.fileUri, fileName, mimeType);\n            return result;\n        } finally{\n            // Step 4: Cleanup (always attempt cleanup using file name)\n            if (uploadedFile) {\n                await this.deleteGoogleFile(uploadedFile.name);\n            }\n        }\n    }\n}\n// Export default instance\nconst googleFilesProcessor = new GoogleFilesProcessor();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixzQkFBc0IsQ0FBQ2dCLGFBQWEvQixPQUFPLEVBQUV2QixVQUFVQztZQUVqRixPQUFPa0I7UUFDVCxTQUFVO1lBQ1IsMkRBQTJEO1lBQzNELElBQUltQyxjQUFjO2dCQUNoQixNQUFNLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNFLGFBQWFqQyxJQUFJO1lBQy9DO1FBQ0Y7SUFDRjtBQUNGO0FBRUEsMEJBQTBCO0FBQ25CLE1BQU1rQyx1QkFBdUIsSUFBSWpFLHVCQUF1QiIsInNvdXJjZXMiOlsiL1VzZXJzL3lvZ2VzaHdhcnBhd2FkZS9EZXNrdG9wL1MzQ1VSQSBUYXNrL2xpYi9nb29nbGUtZmlsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSBcIkBnb29nbGUvZ2VuZXJhdGl2ZS1haVwiO1xuXG4vLyBMb2dnZXIgdXRpbGl0eVxuY29uc3QgbG9nZ2VyID0ge1xuICBpbmZvOiAobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSA9PiB7XG4gICAgY29uc29sZS5sb2coYFtHT09HTEUtRklMRVNdICR7bWVzc2FnZX1gLCBkYXRhID8gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMikgOiAnJyk7XG4gIH0sXG4gIGVycm9yOiAobWVzc2FnZTogc3RyaW5nLCBlcnJvcjogYW55KSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgW0dPT0dMRS1GSUxFU10gJHttZXNzYWdlfWAsIHtcbiAgICAgIG1lc3NhZ2U6IGVycm9yPy5tZXNzYWdlLFxuICAgICAgc3RhdHVzOiBlcnJvcj8uc3RhdHVzLFxuICAgICAgc3RhY2s6IGVycm9yPy5zdGFjayxcbiAgICB9KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgR29vZ2xlRmlsZVVwbG9hZFJlc3VsdCB7XG4gIGZpbGVVcmk6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBtaW1lVHlwZTogc3RyaW5nO1xuICBzaXplQnl0ZXM6IHN0cmluZztcbiAgc3RhdGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWRlb1Byb2Nlc3NpbmdSZXN1bHQge1xuICB0cmFuc2NyaXB0OiBzdHJpbmc7XG4gIHN1bW1hcnk6IHN0cmluZztcbiAgZHVyYXRpb24/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBHb29nbGVGaWxlc1Byb2Nlc3NvciB7XG4gIHByaXZhdGUgZ2VuQUk6IEdvb2dsZUdlbmVyYXRpdmVBSTtcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZO1xuICAgIGlmICghYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dlbWluaSBBUEkga2V5IGlzIG5vdCBjb25maWd1cmVkLiBQbGVhc2UgYWRkIEdFTUlOSV9BUElfS0VZIHRvIGVudmlyb25tZW50IHZhcmlhYmxlcy4nKTtcbiAgICB9XG4gICAgdGhpcy5nZW5BSSA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkoYXBpS2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgZmlsZSB0byBHb29nbGUgRmlsZXMgQVBJIHVzaW5nIHJlc3VtYWJsZSB1cGxvYWRcbiAgICovXG4gIGFzeW5jIHVwbG9hZFRvR29vZ2xlRmlsZXMoXG4gICAgZmlsZUJ1ZmZlcjogQnVmZmVyLFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgbWltZVR5cGU6IHN0cmluZ1xuICApOiBQcm9taXNlPEdvb2dsZUZpbGVVcGxvYWRSZXN1bHQ+IHtcbiAgICBsb2dnZXIuaW5mbyhgVXBsb2FkaW5nIGZpbGUgdG8gR29vZ2xlIEZpbGVzIEFQSTogJHtmaWxlTmFtZX1gKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBTdGVwIDE6IEluaXRpYXRlIHJlc3VtYWJsZSB1cGxvYWRcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgZGlzcGxheV9uYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGxvZ2dlci5pbmZvKCdTdGFydGluZyByZXN1bWFibGUgdXBsb2FkIHNlc3Npb24nLCB7XG4gICAgICAgIGZpbGVOYW1lLFxuICAgICAgICBmaWxlU2l6ZTogZmlsZUJ1ZmZlci5sZW5ndGgsXG4gICAgICAgIG1pbWVUeXBlXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaW5pdFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3VwbG9hZC92MWJldGEvZmlsZXM/a2V5PSR7cHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVl9YCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLUdvb2ctVXBsb2FkLVByb3RvY29sJzogJ3Jlc3VtYWJsZScsXG4gICAgICAgICAgJ1gtR29vZy1VcGxvYWQtQ29tbWFuZCc6ICdzdGFydCcsXG4gICAgICAgICAgJ1gtR29vZy1VcGxvYWQtSGVhZGVyLUNvbnRlbnQtTGVuZ3RoJzogZmlsZUJ1ZmZlci5sZW5ndGgudG9TdHJpbmcoKSxcbiAgICAgICAgICAnWC1Hb29nLVVwbG9hZC1IZWFkZXItQ29udGVudC1UeXBlJzogbWltZVR5cGUsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpLFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghaW5pdFJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IGluaXRSZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGluaXRpYXRlIHJlc3VtYWJsZSB1cGxvYWQnLCB7IFxuICAgICAgICAgIHN0YXR1czogaW5pdFJlc3BvbnNlLnN0YXR1cywgXG4gICAgICAgICAgZXJyb3I6IGVycm9yVGV4dCBcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGluaXRpYXRlIHVwbG9hZDogJHtpbml0UmVzcG9uc2Uuc3RhdHVzfSAtICR7ZXJyb3JUZXh0fWApO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDI6IEdldCB1cGxvYWQgVVJMIGZyb20gcmVzcG9uc2UgaGVhZGVyc1xuICAgICAgY29uc3QgdXBsb2FkVXJsID0gaW5pdFJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LWdvb2ctdXBsb2FkLXVybCcpO1xuICAgICAgaWYgKCF1cGxvYWRVcmwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB1cGxvYWQgVVJMIHJlY2VpdmVkIGZyb20gR29vZ2xlIEZpbGVzIEFQSScpO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXIuaW5mbygnVXBsb2FkIHNlc3Npb24gaW5pdGlhdGVkLCB1cGxvYWRpbmcgZmlsZSBkYXRhJywgeyB1cGxvYWRVcmwgfSk7XG5cbiAgICAgIC8vIFN0ZXAgMzogVXBsb2FkIHRoZSBhY3R1YWwgZmlsZSBkYXRhXG4gICAgICBjb25zdCB1cGxvYWRSZXNwb25zZSA9IGF3YWl0IGZldGNoKHVwbG9hZFVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGZpbGVCdWZmZXIubGVuZ3RoLnRvU3RyaW5nKCksXG4gICAgICAgICAgJ1gtR29vZy1VcGxvYWQtT2Zmc2V0JzogJzAnLFxuICAgICAgICAgICdYLUdvb2ctVXBsb2FkLUNvbW1hbmQnOiAndXBsb2FkLCBmaW5hbGl6ZScsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IGZpbGVCdWZmZXIsXG4gICAgICB9KTtcblxuICAgICAgaWYgKCF1cGxvYWRSZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCB1cGxvYWRSZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHVwbG9hZCBmaWxlIGRhdGEnLCB7IFxuICAgICAgICAgIHN0YXR1czogdXBsb2FkUmVzcG9uc2Uuc3RhdHVzLCBcbiAgICAgICAgICBlcnJvcjogZXJyb3JUZXh0IFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdXBsb2FkIGZpbGUgZGF0YTogJHt1cGxvYWRSZXNwb25zZS5zdGF0dXN9IC0gJHtlcnJvclRleHR9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVwbG9hZFJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGxvZ2dlci5pbmZvKCdGaWxlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseSB0byBHb29nbGUgRmlsZXMgQVBJJywgcmVzdWx0KTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHJlc3BvbnNlIGhhcyB0aGUgZXhwZWN0ZWQgc3RydWN0dXJlXG4gICAgICBpZiAoIXJlc3VsdC5maWxlIHx8ICFyZXN1bHQuZmlsZS5uYW1lIHx8ICFyZXN1bHQuZmlsZS51cmkpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdVbmV4cGVjdGVkIHVwbG9hZCByZXNwb25zZSBmb3JtYXQnLCByZXN1bHQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvb2dsZSBGaWxlcyBBUEkgcmV0dXJuZWQgdW5leHBlY3RlZCByZXNwb25zZSBmb3JtYXQnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZVVyaTogcmVzdWx0LmZpbGUudXJpLFxuICAgICAgICBuYW1lOiByZXN1bHQuZmlsZS5uYW1lLFxuICAgICAgICBtaW1lVHlwZTogcmVzdWx0LmZpbGUubWltZVR5cGUsXG4gICAgICAgIHNpemVCeXRlczogcmVzdWx0LmZpbGUuc2l6ZUJ5dGVzLFxuICAgICAgICBzdGF0ZTogcmVzdWx0LmZpbGUuc3RhdGUsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byB1cGxvYWQgdG8gR29vZ2xlIEZpbGVzIEFQSScsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVwbG9hZCB0byBHb29nbGUgRmlsZXMgQVBJOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGZvciBmaWxlIHByb2Nlc3NpbmcgdG8gY29tcGxldGVcbiAgICovXG4gIGFzeW5jIHdhaXRGb3JGaWxlUHJvY2Vzc2luZyhmaWxlTmFtZTogc3RyaW5nLCBtYXhXYWl0VGltZTogbnVtYmVyID0gMzAwMDAwKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgbG9nZ2VyLmluZm8oYFdhaXRpbmcgZm9yIGZpbGUgcHJvY2Vzc2luZzogJHtmaWxlTmFtZX1gKTtcbiAgICBcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBvbGxJbnRlcnZhbCA9IDUwMDA7IC8vIDUgc2Vjb25kc1xuXG4gICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCBtYXhXYWl0VGltZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVXNlIHRoZSBmaWxlIG5hbWUgKG5vdCBVUkkpIGZvciBzdGF0dXMgY2hlY2tpbmdcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vdjFiZXRhLyR7ZmlsZU5hbWV9P2tleT0ke3Byb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZfWAsIHtcbiAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGNoZWNrIGZpbGUgc3RhdHVzJywgeyBcbiAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLCBcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JUZXh0IFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNoZWNrIGZpbGUgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c30gLSAke2Vycm9yVGV4dH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbGVJbmZvID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBsb2dnZXIuaW5mbygnRmlsZSBwcm9jZXNzaW5nIHN0YXR1cycsIHsgXG4gICAgICAgICAgc3RhdGU6IGZpbGVJbmZvLnN0YXRlLCBcbiAgICAgICAgICBuYW1lOiBmaWxlSW5mby5uYW1lLFxuICAgICAgICAgIG1pbWVUeXBlOiBmaWxlSW5mby5taW1lVHlwZSBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZpbGVJbmZvLnN0YXRlID09PSAnQUNUSVZFJykge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdGaWxlIHByb2Nlc3NpbmcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGVJbmZvLnN0YXRlID09PSAnRkFJTEVEJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmlsZSBwcm9jZXNzaW5nIGZhaWxlZCBvbiBHb29nbGUgc2VydmVycycpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9nZ2VyLmluZm8oYEZpbGUgc3RhdGU6ICR7ZmlsZUluZm8uc3RhdGV9LCB3YWl0aW5nICR7cG9sbEludGVydmFsLzEwMDB9cyBiZWZvcmUgbmV4dCBjaGVjay4uLmApO1xuICAgICAgICBcbiAgICAgICAgLy8gV2FpdCBiZWZvcmUgbmV4dCBwb2xsXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBwb2xsSW50ZXJ2YWwpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgY2hlY2tpbmcgZmlsZSBwcm9jZXNzaW5nIHN0YXR1cycsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlIHByb2Nlc3NpbmcgdGltZW91dCBhZnRlciAke21heFdhaXRUaW1lIC8gMTAwMH0gc2Vjb25kc2ApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHRyYW5zY3JpcHQgYW5kIHN1bW1hcnkgdXNpbmcgR2VtaW5pXG4gICAqL1xuICBhc3luYyBwcm9jZXNzVmlkZW9XaXRoR2VtaW5pKFxuICAgIGZpbGVVcmk6IHN0cmluZyxcbiAgICBmaWxlTmFtZTogc3RyaW5nLFxuICAgIG1pbWVUeXBlOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxWaWRlb1Byb2Nlc3NpbmdSZXN1bHQ+IHtcbiAgICBsb2dnZXIuaW5mbyhgUHJvY2Vzc2luZyB2aWRlbyB3aXRoIEdlbWluaTogJHtmaWxlTmFtZX1gKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZ2VtaW5pLTIuMC1mbGFzaC0wMDFcIiB9KTtcblxuICAgICAgLy8gQ3JlYXRlIHByb21wdCBmb3IgdmlkZW8gYW5hbHlzaXNcbiAgICAgIGNvbnN0IHByb21wdCA9IGBcbllvdSBhcmUgYW4gZXhwZXJ0IHZpZGVvIGFuYWx5c3QuIFBsZWFzZSBhbmFseXplIHRoaXMgdmlkZW8gZmlsZSBhbmQgcHJvdmlkZTpcblxuMS4gKipDb21wbGV0ZSBUcmFuc2NyaXB0Kio6IEV4dHJhY3QgYWxsIHNwb2tlbiBjb250ZW50IGZyb20gdGhlIHZpZGVvXG4yLiAqKkNvbXByZWhlbnNpdmUgU3VtbWFyeSoqOiBDcmVhdGUgYSBkZXRhaWxlZCBzdW1tYXJ5IG9mIHRoZSBrZXkgcG9pbnRzLCBpbnNpZ2h0cywgYW5kIGNvbmNsdXNpb25zXG5cbkZvciB0aGUgdmlkZW8gXCIke2ZpbGVOYW1lfVwiOlxuXG5JbnN0cnVjdGlvbnM6XG4tIEV4dHJhY3QgQUxMIHNwb2tlbiB3b3JkcyBhY2N1cmF0ZWx5XG4tIElkZW50aWZ5IG1haW4gdG9waWNzIGFuZCBrZXkgcG9pbnRzXG4tIEhpZ2hsaWdodCBpbXBvcnRhbnQgaW5zaWdodHMgYW5kIGNvbmNsdXNpb25zXG4tIFN0cnVjdHVyZSB0aGUgc3VtbWFyeSB3aXRoIGNsZWFyIHNlY3Rpb25zXG4tIFVzZSBtYXJrZG93biBmb3JtYXR0aW5nIGZvciByZWFkYWJpbGl0eVxuLSBGb2N1cyBvbiBhY3Rpb25hYmxlIGluZm9ybWF0aW9uIGFuZCBrZXkgdGFrZWF3YXlzXG5cblBsZWFzZSBwcm92aWRlIHlvdXIgcmVzcG9uc2UgaW4gdGhpcyBleGFjdCBmb3JtYXQ6XG5cbiMjIFRSQU5TQ1JJUFRcbltDb21wbGV0ZSB0cmFuc2NyaXB0IGhlcmVdXG5cbiMjIFNVTU1BUllcbltDb21wcmVoZW5zaXZlIHN1bW1hcnkgaGVyZV1cbmA7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGNvbnRlbnQgd2l0aCB0aGUgdXBsb2FkZWQgZmlsZVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZ2VuZXJhdGVDb250ZW50KFtcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICB7XG4gICAgICAgICAgZmlsZURhdGE6IHtcbiAgICAgICAgICAgIGZpbGVVcmk6IGZpbGVVcmksXG4gICAgICAgICAgICBtaW1lVHlwZTogbWltZVR5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3VsdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS50ZXh0KCk7XG5cbiAgICAgIC8vIFBhcnNlIHRoZSByZXNwb25zZSB0byBleHRyYWN0IHRyYW5zY3JpcHQgYW5kIHN1bW1hcnlcbiAgICAgIGNvbnN0IHNlY3Rpb25zID0gdGhpcy5wYXJzZUdlbWluaVJlc3BvbnNlKHRleHQpO1xuICAgICAgXG4gICAgICBsb2dnZXIuaW5mbygnVmlkZW8gcHJvY2Vzc2luZyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zY3JpcHQ6IHNlY3Rpb25zLnRyYW5zY3JpcHQsXG4gICAgICAgIHN1bW1hcnk6IHNlY3Rpb25zLnN1bW1hcnksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIHZpZGVvIHdpdGggR2VtaW5pJywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcHJvY2VzcyB2aWRlbyB3aXRoIEdlbWluaTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgR2VtaW5pIHJlc3BvbnNlIHRvIGV4dHJhY3QgdHJhbnNjcmlwdCBhbmQgc3VtbWFyeVxuICAgKi9cbiAgcHJpdmF0ZSBwYXJzZUdlbWluaVJlc3BvbnNlKHRleHQ6IHN0cmluZyk6IHsgdHJhbnNjcmlwdDogc3RyaW5nOyBzdW1tYXJ5OiBzdHJpbmcgfSB7XG4gICAgY29uc3QgdHJhbnNjcmlwdE1hdGNoID0gdGV4dC5tYXRjaCgvIyMgVFJBTlNDUklQVFxccyooW1xcc1xcU10qPykoPz0jIyBTVU1NQVJZfCQpL2kpO1xuICAgIGNvbnN0IHN1bW1hcnlNYXRjaCA9IHRleHQubWF0Y2goLyMjIFNVTU1BUllcXHMqKFtcXHNcXFNdKj8pJC9pKTtcblxuICAgIGNvbnN0IHRyYW5zY3JpcHQgPSB0cmFuc2NyaXB0TWF0Y2ggPyB0cmFuc2NyaXB0TWF0Y2hbMV0udHJpbSgpIDogdGV4dDtcbiAgICBjb25zdCBzdW1tYXJ5ID0gc3VtbWFyeU1hdGNoID8gc3VtbWFyeU1hdGNoWzFdLnRyaW0oKSA6IHRleHQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNjcmlwdDogdHJhbnNjcmlwdCB8fCAnVHJhbnNjcmlwdCBleHRyYWN0aW9uIGZhaWxlZCcsXG4gICAgICBzdW1tYXJ5OiBzdW1tYXJ5IHx8IHRleHQsIC8vIEZhbGxiYWNrIHRvIGZ1bGwgdGV4dCBpZiBwYXJzaW5nIGZhaWxzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCB1cGxvYWRlZCBmaWxlIGZyb20gR29vZ2xlIEZpbGVzIEFQSVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlR29vZ2xlRmlsZShmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbG9nZ2VyLmluZm8oYERlbGV0aW5nIGZpbGUgZnJvbSBHb29nbGUgRmlsZXMgQVBJOiAke2ZpbGVOYW1lfWApO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS8ke2ZpbGVOYW1lfT9rZXk9JHtwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWX1gLCB7XG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGRlbGV0ZSBmaWxlIGZyb20gR29vZ2xlIEZpbGVzIEFQSScsIHsgXG4gICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgZXJyb3I6IGVycm9yVGV4dCBcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIuaW5mbygnRmlsZSBkZWxldGVkIHN1Y2Nlc3NmdWxseSBmcm9tIEdvb2dsZSBGaWxlcyBBUEknKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBkZWxldGluZyBmaWxlIGZyb20gR29vZ2xlIEZpbGVzIEFQSScsIGVycm9yKTtcbiAgICAgIC8vIERvbid0IHRocm93IGVycm9yIGZvciBjbGVhbnVwIG9wZXJhdGlvbnNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcGxldGUgd29ya2Zsb3c6IHVwbG9hZCwgcHJvY2VzcywgYW5kIGNsZWFudXBcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NWaWRlbyhcbiAgICBmaWxlQnVmZmVyOiBCdWZmZXIsXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICBtaW1lVHlwZTogc3RyaW5nXG4gICk6IFByb21pc2U8VmlkZW9Qcm9jZXNzaW5nUmVzdWx0PiB7XG4gICAgbGV0IHVwbG9hZGVkRmlsZTogR29vZ2xlRmlsZVVwbG9hZFJlc3VsdCB8IG51bGwgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0ZXAgMTogVXBsb2FkIHRvIEdvb2dsZSBGaWxlcyBBUElcbiAgICAgIHVwbG9hZGVkRmlsZSA9IGF3YWl0IHRoaXMudXBsb2FkVG9Hb29nbGVGaWxlcyhmaWxlQnVmZmVyLCBmaWxlTmFtZSwgbWltZVR5cGUpO1xuXG4gICAgICAvLyBTdGVwIDI6IFdhaXQgZm9yIHByb2Nlc3NpbmcgKHVzZSBmaWxlIG5hbWUsIG5vdCBVUkkpXG4gICAgICBhd2FpdCB0aGlzLndhaXRGb3JGaWxlUHJvY2Vzc2luZyh1cGxvYWRlZEZpbGUubmFtZSk7XG5cbiAgICAgIC8vIFN0ZXAgMzogUHJvY2VzcyB3aXRoIEdlbWluaSAodXNlIGZpbGUgVVJJKVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wcm9jZXNzVmlkZW9XaXRoR2VtaW5pKHVwbG9hZGVkRmlsZS5maWxlVXJpLCBmaWxlTmFtZSwgbWltZVR5cGUpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBTdGVwIDQ6IENsZWFudXAgKGFsd2F5cyBhdHRlbXB0IGNsZWFudXAgdXNpbmcgZmlsZSBuYW1lKVxuICAgICAgaWYgKHVwbG9hZGVkRmlsZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZUdvb2dsZUZpbGUodXBsb2FkZWRGaWxlLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBFeHBvcnQgZGVmYXVsdCBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGdvb2dsZUZpbGVzUHJvY2Vzc29yID0gbmV3IEdvb2dsZUZpbGVzUHJvY2Vzc29yKCk7ICJdLCJuYW1lcyI6WyJHb29nbGVHZW5lcmF0aXZlQUkiLCJsb2dnZXIiLCJpbmZvIiwibWVzc2FnZSIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsImVycm9yIiwic3RhdHVzIiwic3RhY2siLCJHb29nbGVGaWxlc1Byb2Nlc3NvciIsImNvbnN0cnVjdG9yIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkdFTUlOSV9BUElfS0VZIiwiRXJyb3IiLCJnZW5BSSIsInVwbG9hZFRvR29vZ2xlRmlsZXMiLCJmaWxlQnVmZmVyIiwiZmlsZU5hbWUiLCJtaW1lVHlwZSIsIm1ldGFkYXRhIiwiZmlsZSIsImRpc3BsYXlfbmFtZSIsImZpbGVTaXplIiwibGVuZ3RoIiwiaW5pdFJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwidG9TdHJpbmciLCJib2R5Iiwib2siLCJlcnJvclRleHQiLCJ0ZXh0IiwidXBsb2FkVXJsIiwiZ2V0IiwidXBsb2FkUmVzcG9uc2UiLCJyZXN1bHQiLCJqc29uIiwibmFtZSIsInVyaSIsImZpbGVVcmkiLCJzaXplQnl0ZXMiLCJzdGF0ZSIsIndhaXRGb3JGaWxlUHJvY2Vzc2luZyIsIm1heFdhaXRUaW1lIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsInBvbGxJbnRlcnZhbCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImZpbGVJbmZvIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicHJvY2Vzc1ZpZGVvV2l0aEdlbWluaSIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwicHJvbXB0IiwiZ2VuZXJhdGVDb250ZW50IiwiZmlsZURhdGEiLCJzZWN0aW9ucyIsInBhcnNlR2VtaW5pUmVzcG9uc2UiLCJ0cmFuc2NyaXB0Iiwic3VtbWFyeSIsInRyYW5zY3JpcHRNYXRjaCIsIm1hdGNoIiwic3VtbWFyeU1hdGNoIiwidHJpbSIsImRlbGV0ZUdvb2dsZUZpbGUiLCJwcm9jZXNzVmlkZW8iLCJ1cGxvYWRlZEZpbGUiLCJnb29nbGVGaWxlc1Byb2Nlc3NvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-files.ts\n");

/***/ }),

/***/ "(rsc)/./lib/s3-downloader.ts":
/*!******************************!*\
  !*** ./lib/s3-downloader.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S3Downloader: () => (/* binding */ S3Downloader),\n/* harmony export */   s3Downloader: () => (/* binding */ s3Downloader)\n/* harmony export */ });\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\n/* harmony import */ var _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__);\n\n// Initialize S3 client\nconst s3Client = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.S3Client({\n    region: process.env.AWS_REGION || \"us-east-1\",\n    credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n    }\n});\n// Logger utility\nconst logger = {\n    info: (message, data)=>{\n        console.log(`[S3-DOWNLOADER] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    },\n    error: (message, error)=>{\n        console.error(`[S3-DOWNLOADER] ${message}`, {\n            message: error?.message,\n            status: error?.status,\n            stack: error?.stack\n        });\n    }\n};\nclass S3Downloader {\n    constructor(bucket){\n        this.bucket = bucket || process.env.AWS_S3_BUCKET || \"\";\n        if (!this.bucket) {\n            throw new Error(\"AWS S3 bucket name is required. Set AWS_S3_BUCKET environment variable.\");\n        }\n    }\n    /**\n   * Download file from S3 and return as Buffer\n   */ async downloadFile(s3Key) {\n        logger.info(`Downloading file from S3: ${s3Key}`);\n        try {\n            const command = new _aws_sdk_client_s3__WEBPACK_IMPORTED_MODULE_0__.GetObjectCommand({\n                Bucket: this.bucket,\n                Key: s3Key\n            });\n            const response = await s3Client.send(command);\n            if (!response.Body) {\n                throw new Error('No file content received from S3');\n            }\n            // Convert stream to buffer\n            const buffer = await this.streamToBuffer(response.Body);\n            logger.info('File downloaded successfully from S3', {\n                size: buffer.length,\n                contentType: response.ContentType,\n                lastModified: response.LastModified\n            });\n            return {\n                buffer,\n                contentType: response.ContentType || 'application/octet-stream',\n                contentLength: buffer.length,\n                lastModified: response.LastModified\n            };\n        } catch (error) {\n            logger.error('Failed to download file from S3', error);\n            throw new Error(`Failed to download file from S3: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    /**\n   * Convert stream to buffer\n   */ async streamToBuffer(stream) {\n        return new Promise((resolve, reject)=>{\n            const chunks = [];\n            stream.on('data', (chunk)=>{\n                chunks.push(chunk);\n            });\n            stream.on('end', ()=>{\n                resolve(Buffer.concat(chunks));\n            });\n            stream.on('error', (error)=>{\n                reject(error);\n            });\n        });\n    }\n    /**\n   * Check if file exists in S3\n   */ async fileExists(s3Key) {\n        try {\n            const { HeadObjectCommand } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\", 23));\n            await s3Client.send(new HeadObjectCommand({\n                Bucket: this.bucket,\n                Key: s3Key\n            }));\n            return true;\n        } catch (error) {\n            if (error.name === \"NotFound\" || error.$metadata?.httpStatusCode === 404) {\n                return false;\n            }\n            throw error;\n        }\n    }\n    /**\n   * Get file metadata without downloading\n   */ async getFileMetadata(s3Key) {\n        try {\n            const { HeadObjectCommand } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\", 23));\n            const response = await s3Client.send(new HeadObjectCommand({\n                Bucket: this.bucket,\n                Key: s3Key\n            }));\n            return {\n                size: response.ContentLength || 0,\n                contentType: response.ContentType || 'application/octet-stream',\n                lastModified: response.LastModified\n            };\n        } catch (error) {\n            logger.error('Failed to get file metadata', error);\n            throw new Error(`Failed to get file metadata: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n}\n// Export default instance\nconst s3Downloader = new S3Downloader();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/s3-downloader.ts\n");

/***/ }),

/***/ "(rsc)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Supabase configuration\nconst supabaseUrl = \"https://hazqnbeezzevhpjtgceq.supabase.co\";\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhhenFuYmVlenpldmhwanRnY2VxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4MjM0MjUsImV4cCI6MjA2NTM5OTQyNX0.dw28aeUFgubtz2W1Xnuo-6hrQP88kGinv9gZj64o4s8\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFcEQseUJBQXlCO0FBQ3pCLE1BQU1DLGNBQWNDLDBDQUFvQztBQUN4RCxNQUFNRyxjQUFjSCxrTkFBeUM7QUFFdEQsTUFBTUssV0FBV1AsbUVBQVlBLENBQUNDLGFBQWFJLGFBQVkiLCJzb3VyY2VzIjpbIi9Vc2Vycy95b2dlc2h3YXJwYXdhZGUvRGVza3RvcC9TM0NVUkEgVGFzay9saWIvc3VwYWJhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJ1xuXG4vLyBTdXBhYmFzZSBjb25maWd1cmF0aW9uXG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCFcbmNvbnN0IHN1cGFiYXNlS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkhXG5cbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VLZXkpXG5cbi8vIERhdGFiYXNlIHR5cGVzIGZvciBUeXBlU2NyaXB0XG5leHBvcnQgaW50ZXJmYWNlIFN1bW1hcnkge1xuICBpZDogc3RyaW5nXG4gIHZpZGVvSWQ6IHN0cmluZ1xuICB0aXRsZTogc3RyaW5nXG4gIGNvbnRlbnQ6IHN0cmluZ1xuICBsYW5ndWFnZTogc3RyaW5nXG4gIG1vZGU6IHN0cmluZ1xuICBzb3VyY2U/OiBzdHJpbmdcbiAgY3JlYXRlZEF0OiBzdHJpbmdcbiAgdXBkYXRlZEF0OiBzdHJpbmdcbn0gIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprocess-s3-video%2Froute&page=%2Fapi%2Fprocess-s3-video%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-s3-video%2Froute.ts&appDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fyogeshwarpawade%2FDesktop%2FS3CURA%20Task&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();